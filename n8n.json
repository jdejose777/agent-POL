{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "rag-chat-agent",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        48,
        -48
      ],
      "id": "92dae9dd-3fd5-4179-a0dc-b9d898677a33",
      "name": "üéØ Webhook - Entrada del Chat",
      "webhookId": "50c7b284-782d-4eba-a727-844c338cb15d",
      "notes": "Punto de entrada para las preguntas del usuario desde el frontend"
    },
    {
      "parameters": {
        "jsCode": "// üîç NODO 3: B√öSQUEDA EN PINECONE\n// Este nodo busca contenido relevante en la base de datos vectorial usando el embedding\n\n// --- 1. CONFIGURACI√ìN ---\n// ‚ö†Ô∏è ¬°IMPORTANTE! Revisa y ajusta estos tres valores.\n\n// b) El nombre de tu entorno/ambiente de Pinecone (ej: \"gcp-starter\")\nconst PINECONE_ENVIRONMENT = 'us-east-1'; // Reemplaza con tu valor\n\n// c) El nombre de tu √≠ndice de Pinecone\nconst PINECONE_INDEX_NAME = \"developer-quickstart-py\"; // Reemplaza con tu valor\n\n\n// --- 2. OBTENER DATOS Y CREDENCIALES ---\n\n// Obtener todos los datos que vienen del nodo anterior (que ahora es el nodo 'Set')\nconst inputData = $input.first().json;\n\n// Extraer los datos que necesitamos\nconst pregunta = inputData.pregunta;\nconst embedding = inputData.embedding;\nconst pineconeApiKey = inputData.pineconeApiKey; // Leemos la clave inyectada por el nodo 'Set'\n\n// Verificaci√≥n de que todo ha llegado correctamente\nif (!pregunta || !embedding || !pineconeApiKey) {\n  throw new Error(`‚ùå Faltan datos de entrada. Aseg√∫rate de que el nodo 'Set' anterior est√° enviando 'pregunta', 'embedding' y 'pineconeApiKey'.`);\n}\n\nconsole.log('üîç Iniciando b√∫squeda en Pinecone para:', pregunta);\n\n\n// --- 3. L√ìGICA DE B√öSQUEDA ---\n\n// Construir la URL completa del endpoint de tu √≠ndice de Pinecone\nconst pineconeUrl = `https://${PINECONE_INDEX_NAME}-${PINECONE_ENVIRONMENT}.svc.pinecone.io/query`;\n\n// Funci√≥n para buscar en Pinecone\nasync function buscarEnPinecone(queryEmbedding, topK = 5) {\n  const response = await $http.request({\n    method: 'POST',\n    url: pineconeUrl,\n    headers: {\n      'Api-Key': pineconeApiKey,\n      'Content-Type': 'application/json'\n    },\n    body: {\n      vector: queryEmbedding,\n      topK: topK,\n      includeMetadata: true,\n      includeValues: false\n    }\n  });\n  \n  if (response.status >= 400) {\n    console.error(\"Respuesta de error de Pinecone:\", response.data);\n    throw new Error(`‚ùå Error en Pinecone API: ${response.status} - ${response.data.message || response.statusText}`);\n  }\n  \n  return response.data;\n}\n\n\n// --- 4. PROCESAR RESULTADOS ---\n\n// Realizar b√∫squeda\nconst resultadosBusqueda = await buscarEnPinecone(embedding, 5);\n\n// Extraer contexto relevante\nconst matches = resultadosBusqueda.matches || [];\nconst contexto = matches\n  .filter(match => match.score > 0.7)\n  .map(match => match.metadata?.text || '')\n  .filter(text => text.length > 0)\n  .join('\\n\\n');\n\nconsole.log('üìã Contexto encontrado:', {\n  matchesEncontrados: matches.length,\n  matchesRelevantes: matches.filter(m => m.score > 0.7).length,\n  longitudContexto: contexto.length\n});\n\nif (contexto.length === 0) {\n  console.log('‚ö†Ô∏è  No se encontr√≥ contexto relevante');\n}\n\n// Devolver datos para el siguiente nodo\nreturn {\n  pregunta: pregunta,\n  contexto: contexto\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        864,
        -32
      ],
      "id": "2578cdeb-cbe8-4b2b-9222-acd10e7269c9",
      "name": "üîç B√∫squeda en Pinecone",
      "notes": "Busca informaci√≥n relevante en la base de datos vectorial"
    },
    {
      "parameters": {
        "jsCode": "// ü§ñ NODO 4: GENERAR RESPUESTA CON GOOGLE GEMINI\n// Este nodo construye el prompt final y genera la respuesta usando Gemini\n\n// Obtener datos del nodo anterior\nconst { pregunta, contexto, tieneContexto, numeroResultados } = $input.first().json;\n\nconsole.log('ü§ñ Generando respuesta para:', pregunta);\nconsole.log('üìö Contexto disponible:', tieneContexto);\n\n// Configuraci√≥n de Google Gemini\nconst googleApiKey = $env.GOOGLE_API_KEY;\nif (!googleApiKey) {\n  throw new Error('‚ùå GOOGLE_API_KEY no est√° configurada');\n}\n\n// Construir el prompt seg√∫n si hay contexto o no\nlet promptFinal;\n\nif (tieneContexto) {\n  promptFinal = `Eres un asistente jur√≠dico especializado en el C√≥digo Penal espa√±ol. Responde bas√°ndote √∫nicamente en el contexto proporcionado.\n\nCONTEXTO DEL C√ìDIGO PENAL:\n${contexto}\n\nPREGUNTA:\n${pregunta}\n\nINSTRUCCIONES:\n- Responde bas√°ndote √∫nicamente en el contexto del C√≥digo Penal proporcionado\n- Si la informaci√≥n no est√° en el contexto, ind√≠calo claramente\n- Cita los art√≠culos espec√≠ficos cuando sea posible\n- Usa un lenguaje claro y profesional\n- Si es relevante, menciona las penas asociadas\n\nRESPUESTA:`;\n} else {\n  promptFinal = `Eres un asistente jur√≠dico especializado en el C√≥digo Penal espa√±ol.\n\nPREGUNTA:\n${pregunta}\n\nNo se encontr√≥ informaci√≥n espec√≠fica en el C√≥digo Penal para responder a esta pregunta.\n\nResponde educadamente explicando que:\n1. No se encontr√≥ informaci√≥n relevante en el C√≥digo Penal procesado\n2. Sugiere reformular la pregunta usando t√©rminos jur√≠dicos m√°s espec√≠ficos\n3. Recuerda que solo puedes consultar sobre el C√≥digo Penal espa√±ol\n\nRESPUESTA:`;\n}\n\n// Funci√≥n para llamar a Google Gemini\nasync function generarRespuestaGemini(prompt) {\n  const response = await $http.request({\n    method: 'POST',\n    url: `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${googleApiKey}`,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: {\n      contents: [{\n        parts: [{\n          text: prompt\n        }]\n      }],\n      generationConfig: {\n        temperature: 0.3,\n        topK: 20,\n        topP: 0.8,\n        maxOutputTokens: 800\n      }\n    }\n  });\n  \n  if (response.status !== 200) {\n    throw new Error(`‚ùå Error en Google Gemini API: ${response.status} - ${response.statusText}`);\n  }\n  \n  return response.data.candidates[0].content.parts[0].text.trim();\n}\n\n// Generar la respuesta\nconst respuestaFinal = await generarRespuestaGemini(promptFinal);\n\nconsole.log('‚úÖ Respuesta generada correctamente con Google Gemini');\nconsole.log('üìù Longitud de la respuesta:', respuestaFinal.length, 'caracteres');\n\n// Preparar respuesta final para el webhook\nconst respuestaCompleta = {\n  respuesta: respuestaFinal,\n  metadata: {\n    pregunta: pregunta,\n    tieneContexto: tieneContexto,\n    numeroResultados: numeroResultados,\n    timestamp: new Date().toISOString(),\n    modelo: 'gemini-1.5-flash',\n    dominio: 'codigo-penal-espanol'\n  }\n};\n\nreturn respuestaCompleta;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        -32
      ],
      "id": "a5e85433-6f70-4928-a37f-5d994d2cc453",
      "name": "‚öñÔ∏è Asistente Jur√≠dico Gemini",
      "notes": "Genera respuesta especializada en C√≥digo Penal usando Google Gemini"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1328,
        -32
      ],
      "id": "4b7110fa-92c0-4213-9cbe-6d4a8fb1ac36",
      "name": "üì§ Responder al Chat",
      "notes": "Devuelve la respuesta final al frontend con headers CORS"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://embedding-service:8000/generate-embedding",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": \"{{ $input.first().json.body.pregunta }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        272,
        -16
      ],
      "id": "cf4e5c65-5011-471a-85f6-864fe1af05a9",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "78f607fd-26de-4f9b-a71f-7f7a83539850",
              "name": "pregunta",
              "value": "=\t{{ $('üéØ Webhook - Entrada del Chat').item.json.body.pregunta }}",
              "type": "string"
            },
            {
              "id": "e28f3346-ced5-4fc9-aaa1-cdd154e7e311",
              "name": "embedding",
              "value": "={{ $json.embedding }}",
              "type": "string"
            },
            {
              "id": "c17ddbb2-44d0-4dd5-a5cc-fff67e74319e",
              "name": "pineconeApiKey",
              "value": "={{ $credentials.PineconeApi.apiKey }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        544,
        -16
      ],
      "id": "683baf63-a7c5-4793-9362-363a3291afe2",
      "name": "Set"
    }
  ],
  "connections": {
    "üéØ Webhook - Entrada del Chat": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç B√∫squeda en Pinecone": {
      "main": [
        [
          {
            "node": "‚öñÔ∏è Asistente Jur√≠dico Gemini",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öñÔ∏è Asistente Jur√≠dico Gemini": {
      "main": [
        [
          {
            "node": "üì§ Responder al Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "üîç B√∫squeda en Pinecone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "c786d0d9a4c2ba2d2f6b54ce9924958929e4369f91715073b635c659318d21ae"
  }
}